library(shiny)



shinyUI(fluidPage(



    sidebarLayout(

        sidebarPanel(

            numericInput('k', 'No of securities', 3),

            textInput('names', 'Security Names', 'Alpha Beta Gamma'),

            textInput('mean', 'Expected Returns (%)', '10 15 20'),

            textInput('sigmas', 'Standard Deviations (%)', '20 25 30'),

            textInput('correl',

                      'Correlations (R2,1 .. Rk,1 R3,2.. Rk,2 ... Rk,k-1)',

                      '0.3 0.2   0.1'),

            selectInput('type', 'Plot type',

                         list('Efficient Frontier',

                              'Portfolio Composition'),

                         selected = 'Efficient Frontier'),

            conditionalPanel(

                condition = "input.type == 'Efficient Frontier'",

                checkboxInput('frontier.twoasset',

                              'Plot All Two Asset Frontiers',

                              value = TRUE),

                checkboxInput('montecarlo', 'Plot Random Portfolios',

                              value = FALSE),

                numericInput('npoints', 'No of Random Portfolios', 200)

                )

            ) ,

        

        mainPanel(

            h1('Efficient Frontier'),

            tabsetPanel(

                tabPanel("Plot", plotOutput("plot")),

                tabPanel("Input Data",

                         h4('Means and Standard Deviations'),

                         tableOutput("mu.sd"),

                         h4('Correlation Matrix'),

                         tableOutput("rho")

                         )

                )

            )

        ),

    title ="Efficient Frontier"

    ))
	
	
	
	
	
	
	
	
	
	
	
	
	library(shiny)

library(fPortfolio)



use_original_frontierPlot = TRUE  # source file my-fpoints.R is NOT needed 

## use_original_frontierPlot = FALSE # source file my-fpoints.R is needed



if (use_original_frontierPlot){

    ## Set myfrontierPlot to the original frontierPlot in fPortfolio

    myfrontierPlot = frontierPlot

}else{

    ## Use a more robust version of frontierPlot defined in my-fpoints.R

    ## This version handles degenerate efficient frontiers without errors

    source('my-fpoints.R')

}



shinyServer(

    function(input, output, session) {



        mu <- reactive(scan(text=input$mean, quiet = TRUE) / 100)

        sigmas <- reactive(scan(text=input$sigmas, quiet = TRUE) / 100)

        correl.vector <- reactive(scan(text=input$correl, quiet = TRUE))

        correl <- reactive({

            k <- input$k

            m <- matrix(0, k, k)

            j1 <- 1

            cv <- correl.vector()

            for (i in 1:(k-1)){

                j2 <- j1 + (k - i - 1)

                m[(i+1):k, i] <- cv[j1:j2]

                j1 <- j2 + 1

            }

            m <-  m + t(m)

            diag(m) <- 1

            m

        })

        names <- reactive(scan(text=input$names, what = character(),

                               quiet = TRUE))

        

        ## generate iid sample 



        iid.sample <- reactive({

            k <- input$k

            N <- k + 30 # ensure adequate degrees of freedom

            x <- rnorm(N*k) # iid standard normals (in population)

            ## Sample moments of x can differ from population moments.

            ## We now force sample mean = 0 and sample std deviation =

            ## 1 by simple centering and rescaling

            x <- scale(matrix(x, N, k))

            ## To remove sample correlations, we multiply by the

            ## inverse of the cholesky factor of the sample

            ## covariance. The cholesky factor is like the square root

            ## of the matrix

            x %*% solve(chol(cov(x)))

        })



        ## Generate sample with desired sample moments

        my.sample <- reactive({

            k <- input$k

            validate(

                need(length(mu()) == k,

                     'Wrong number of elements for Expected Returns'),

                need(length(sigmas()) == k,

                     'Wrong number of elements for Standard Deviations'),

                need(length(correl.vector()) == k * (k - 1) / 2,

                     'Wrong number of elements for Correlation Matrix'),

                need(length(names()) == k,

                     'Wrong number of elements for Security Names')

                )

            ## print(eigen(correl())$values)

            validate(

                need(all(eigen(correl())$values > 0),

                     'Correlation matrix not positive definite'),

                need(all(sigmas() > 0),

                     'Standard deviation not positive')

                )

            ## To replicate the required correlation matrix we

            ## multiply the iid sample by the cholesky factor of the

            ## sample covariance. The cholesky factor is like the

            ## square root of the matrix

            y <- iid.sample()  %*% chol(correl())

            ## We then rescale the variables to achieve the required

            ## standard deviations

            y <- scale(y, center = FALSE, scale = 1/sigmas()) 

            ## Finally, we then re-center the variables to achieve the

            ## required means

            y <- scale(y, center = - mu(), scale = FALSE)

            dimnames(y)[[2]] <- names()

            y

        })



        output$mu.sd <- renderTable({

            data.frame(Mean = mu(),

                       StdDev = sigmas(),

                       row.names = names())

        })

        output$rho <- renderTable({

            correl()

        })

        output$plot <- renderPlot({

            fp <- portfolioFrontier(as.timeSeries(my.sample()))

            if(input$type == 'Portfolio Composition'){

                weightsPlot(fp)

            }else{

                myfrontierPlot(fp, col = c('blue', 'red'), pch = 20) 

                if(input$frontier.twoasset)

                    twoAssetsLines(fp, col = 'green')

                if(input$montecarlo)

                    monteCarloPoints(fp, input$npoints,

                                     col = 'grey', pch = 20, cex=0.3)

            }

        })

    })





    
	
	
	
	
	## myfrontierPoints is a more robust version of frontierPlot

## that can handle degenerate frontiers

## For example, in the risk neutral case:

##   All assets have the same expected return and

##   The frontier is a single point (the MVP).

##   The upper frontier (efficient part) has one point

##   The lower frontier (inefficient part) is empty

## The empty lower frontier causes an error in frontierPlot (in fPortfolio)

## frontierPlot calls the frontierPoints function (also in fPortfolio)

## So we patch frontierPoints by adding the following lines to return NULL

## in the degenerate case:

## 

## if (NROW(ans) == 0){

##     NULL

## }else{

##      ...

##      ans

## }

## 

## We use the proto library to make frontierPlot call the patched frontierPoints

## myfrontierPlot <- with(proto(environment(frontierPlot),

##                              frontierPlot = fPortfolio::frontierPlot,

##                              frontierPoints = myfrontierPoints), frontierPlot)



library(proto)



myfrontierPoints <- function (object, frontier = c("both", "lower", "upper"),

                              return = c("mean", "mu"),

                              risk = c("Cov", "Sigma", "CVaR", "VaR"),

                              auto = TRUE) {

    frontier = match.arg(frontier)

    return = match.arg(return)

    risk = match.arg(risk)

    if (auto) {

        Type = getType(object)

        Estimator = getEstimator(object)

        if (Type == "MV") 

            risk = "Cov"

        if (Type == "MV" & Estimator != "covEstimator") 

            risk = "Sigma"

        if (Type == "QLPM") 

            risk = "Sigma"

        if (Type == "CVaR") 

            risk = "CVaR"

    }

    if (is.vector(getTargetRisk(object@portfolio))) {

        targetRisk = getTargetRisk(object@portfolio)[risk]

        targetReturn = getTargetReturn(object@portfolio)[return]

    }

    else {

        targetRisk = getTargetRisk(object@portfolio)[, risk]

        targetReturn = getTargetReturn(object@portfolio)[, return]

    }

    ans = cbind(Risk = targetRisk, Return = targetReturn)

    if (frontier == "upper") {

        index = 1:length(ans[, 1])

        test = c(-1, diff(ans[, 1]))

        index = index[test > 0]

        ans = ans[index, ]

    }

    else if (frontier == "lower") {

        index = 1:length(ans[, 1])

        test = c(-1, diff(ans[, 1]))

        index = index[test < 0]

        if (length(index) == 1) {

            ans = matrix(ans[index, ], ncol = 2)

        }

        else {

            ans = ans[index, ]

        }

    }

    if (NROW(ans) == 0){

        NULL

    }else{

        colnames(ans) = c("targetRisk", "targetReturn")

        rownames(ans) = as.character(1:NROW(ans))

        attr(ans, "control") <- c(targetRisk = risk, targetReturn = return, 

                                  auto = as.character(auto))

        ans

    }

}



myfrontierPlot <- with(proto(environment(frontierPlot),

                             frontierPlot = fPortfolio::frontierPlot,

                             frontierPoints = myfrontierPoints), frontierPlot)